# Note Please make sure to change network name to ur project name 
volumes:
  php-fpm-socket:
  psysh-store:
  db_volume:
  redis_volume:

services:
  php:
    container_name: ${APP_NAME}_php
    build:
      context: .
      dockerfile: ${DOCKER_SERVICES_PATH}/php/Dockerfile
      args:
        DOCKER_SERVICES_PATH: ${DOCKER_SERVICES_PATH}
    restart: unless-stopped
    tty: true
    volumes:
      - type: volume
        source: php-fpm-socket
        target: /var/run/php-fpm
        volume:
          nocopy: true
      - type: volume
        source: psysh-store
        target: /root/.config/psysh
        volume:
          nocopy: true
      - type: bind
        source: .
        target: /var/www/
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      DEBUG: 1
      PHP_IDE_CONFIG: serverName=${APP_NAME}_XdebugServer
    networks:
      backend_docker:
        ipv4_address: ${DOCKER_PHP_NETWORK_IP_ADDRESS}

  nginx:
    container_name: ${APP_NAME}_nginx
    build:
      context: .
      dockerfile: ${DOCKER_SERVICES_PATH}/nginx/Dockerfile
      args:
        DOCKER_SERVICES_PATH: ${DOCKER_SERVICES_PATH}
    restart: unless-stopped
    tty: true
    volumes:
      - type: volume
        source: php-fpm-socket
        target: /var/run/php-fpm
        volume:
          nocopy: true
      - type: bind
        source: .
        target: /var/www/
    ports:
      - "${DOCKER_NGINX_NETWORK_PORT}:80" 
    depends_on:
      - php
    networks:
      backend_docker:
        ipv4_address: ${DOCKER_NGINX_NETWORK_IP_ADDRESS}

  mysql:
    container_name: ${APP_NAME}_mysql
    build:
      context: .
      dockerfile: ${DOCKER_SERVICES_PATH}/mysql/Dockerfile
      args:
        DOCKER_SERVICES_PATH: ${DOCKER_SERVICES_PATH}
    restart: unless-stopped
    tty: true
    volumes:
      - type: volume
        source: db_volume
        target: /var/lib/mysql
        volume:
          nocopy: true
      # - type: bind
      #   source: ${DOCKER_SERVICES_PATH}/mysql/dump.sql
      #   target: /dump.sql
    environment:
      - MYSQL_TCP_PORT=${DB_PORT}
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    ports:
      - "${DB_PORT}:3306"
    networks:
      backend_docker:
        ipv4_address: ${DOCKER_MYSQL_NETWORK_IP_ADDRESS}

  phpmyadmin:
    container_name: ${APP_NAME}_phpmyadmin
    build:
      context: .
      dockerfile: ${DOCKER_SERVICES_PATH}/phpmyadmin/Dockerfile
    environment:
      - PMA_PMADB=phpmyadmin
      - PMA_HOST=${DB_HOST}
      - PMA_PORT=${DB_PORT}
      - PMA_USER=${DB_USERNAME}
      - PMA_PASSWORD=${DB_PASSWORD}
      - PMA_USER=${DB_USERNAME}
      - PMA_PASSWORD=${DB_PASSWORD}
      - MYSQL_TCP_PORT=${DB_PORT}
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
    restart: always
    depends_on:
      - mysql
    links:
      - 'mysql:database' # Establishes the link with MySQL for phpMyAdmin
    ports:
      - "${DOCKER_PHPMYADMIN_NETWORK_PORT}:80"
    networks:
      backend_docker:
        ipv4_address: ${DOCKER_PHPMYADMIN_NETWORK_IP_ADDRESS}

  mailhog:
    container_name: ${APP_NAME}_mailhog
    build:
      context: .
      dockerfile: ${DOCKER_SERVICES_PATH}/mailhog/Dockerfile
    restart: unless-stopped
    tty: true
    ports:
      - "${MAIL_PORT}:1025"
      - "${DOCKER_MAILHOG_NETWORK_PORT}:8025"
    networks:
      backend_docker:
        ipv4_address: ${DOCKER_MAILHOG_NETWORK_IP_ADDRESS}

  redis:
    container_name: ${APP_NAME}_redis
    build:
      context: .
      dockerfile: ${DOCKER_SERVICES_PATH}/redis/Dockerfile
      args:
        DOCKER_SERVICES_PATH: ${DOCKER_SERVICES_PATH}
    restart: unless-stopped
    tty: true
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - type: volume
        source: redis_volume
        target: /data/redis
        volume:
          nocopy: true
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      backend_docker:
        ipv4_address: ${DOCKER_REDIS_NETWORK_IP_ADDRESS}

networks:
  backend_docker:
    name: backend_docker
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${DOCKER_NETWORK_SUBNET}